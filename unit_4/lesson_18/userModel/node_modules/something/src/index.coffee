CALLBACK_KEY = require('./callback-key')
isObject = require('./is-object')
isFunction = require('./is-object')
bindDeep = require('./bind-deep')
unbindDeep = require('./unbind-deep')

execCallbacks = (keys, bindings, object) ->
  keys.reduce(([b, o], key) ->
    b = b?[key]
    o = o?[key]

    b?[CALLBACK_KEY]?.forEach (callback) ->
      setTimeout(->
        callback(o)
      , 0)

    [b, o]

  , [bindings, object])


Something = (object) ->
  bindings = {}

  createWrapper = (obj, depth = []) ->
    return obj unless isObject(obj)
    shallowWrapper = {}

    for own key, value of obj
      do ->
        return if isFunction(value)

        _key = key
        _value = value
        _depth = depth.concat(_key)
        obj[_key] = createWrapper(_value, _depth)

        Object.defineProperty(shallowWrapper, _key, {
          enumerable: true
          get: -> obj[_key]
          set: (value) ->
            return if isFunction(value)

            obj[_key] = createWrapper(value, _depth)
            execCallbacks(_depth, bindings, wrapper)
        })

    shallowWrapper

  watch = (keys, callback) ->
    bindings = bindDeep(keys, callback, bindings)
    wrapper

  unwatch = (keys, callback) ->
    bindings = unbindDeep(keys, callback, bindings)
    wrapper

  wrapper = createWrapper(object)
  wrapper.watch = watch
  wrapper.unwatch = unwatch

  Object.freeze(wrapper)

module.exports = Something
